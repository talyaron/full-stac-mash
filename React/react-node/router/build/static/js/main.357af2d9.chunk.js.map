{"version":3,"sources":["view/pages/Home/Home.js","view/components/image/image.js","view/components/info/info.js","view/pages/About/About.js","view/pages/Users/Users.js","view/pages/Games/Games.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","Image","props","src","alt","Info","About","to","Users","useState","name","setName","address","setAddress","phoneNumber","setPhoneNumber","userID","useParams","useEffect","fetch","then","res","json","data","console","log","Games","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2YAGe,SAASA,IACpB,OAAQ,yBAAKC,UAAU,aACnB,qC,YCUSC,MAVjB,SAAeC,GAIX,OAEE,yBAAKC,IAAI,oBAAoBC,IAAI,kB,MCGtBC,MATjB,WAII,OACE,6DCKS,SAASC,IACpB,OACI,yBAAKN,UAAU,cACX,qCACA,kBAAC,IAAD,CAAMO,GAAG,UAAT,SACA,6BACA,kBAAC,EAAD,MACA,kBAAC,EAAD,O,iBCjBG,SAASC,IAAQ,IAAD,EAEHC,mBAAS,IAFN,mBAEpBC,EAFoB,KAEdC,EAFc,OAGGF,mBAAS,IAHZ,mBAGpBG,EAHoB,KAGXC,EAHW,OAIWJ,mBAAS,IAJpB,mBAIpBK,EAJoB,KAIPC,EAJO,KAKpBC,EAAUC,cAAVD,OAcP,OAZAE,qBAAU,WACNC,MAAM,cAAD,OAAeH,IACnBI,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GACFC,QAAQC,IAAIF,GACZZ,EAAQY,EAAKb,MACbG,EAAWU,EAAKX,SAChBG,EAAeQ,EAAKT,kBAG1B,IAEK,yBAAKd,UAAU,cACtB,qCAAWU,EAAX,KAAmBE,EAAnB,KAA8BE,I,MCtBnB,SAASY,IACpB,OAAQ,yBAAK1B,UAAU,cACnB,sCCWO,SAAS2B,IACtB,OACE,kBAAC,IAAD,KACE,6BACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMpB,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,YAON,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqB,KAAK,UACV,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOA,KAAK,kBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,QAGJ,6DC1CYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.357af2d9.chunk.js","sourcesContent":["import React from \"react\";\nimport './Home.css'\n\nexport default function Home() {\n    return (<div className='page home'>\n        <h1>Home</h1>\n    </div>)\n}","import React, {useState} from 'react';\r\nimport './image.css'\r\n\r\n\r\n\r\nfunction Image(props) {\r\n\r\n    \r\n  \r\n    return (\r\n    \r\n      <img src=\"../img/flower.jpg\" alt='img ot found'/>\r\n    );\r\n  }\r\n\r\n  export default Image;","import React, {useState} from 'react';\r\nimport './info.css'\r\n\r\n\r\n\r\nfunction Info() {\r\n\r\n    \r\n  \r\n    return (\r\n      <h3>This is information About Me</h3>\r\n    );\r\n  }\r\n\r\n  export default Info;","import React from \"react\";\nimport './About.css'\n\nimport Image from '../../components/image/image';\nimport Info from '../../components/info/info';\n\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n  } from \"react-router-dom\";\n\n\nexport default function About() {\n    return (\n        <div className='page about'>\n            <h1>About</h1>\n            <Link to=\"/games\">Games</Link>\n            <br></br>\n            <Image/>\n            <Info/>\n        </div>\n        \n    )\n}\n\n","import React, {useEffect, useState} from \"react\";\nimport './Users.css';\n\nimport { useParams } from \"react-router-dom\";\n\nexport default function Users(){\n\n    const [name, setName] = useState('')\n    const [address, setAddress] = useState('')\n    const [phoneNumber, setPhoneNumber] = useState('')\n    const {userID} = useParams();\n\n    useEffect(()=>{\n        fetch(`/api/users/${userID}`)\n        .then(res=>res.json())\n        .then(data=>{\n            console.log(data);\n            setName(data.name)\n            setAddress(data.address)\n            setPhoneNumber(data.phoneNumber)\n            \n        })\n    },[])\n\n    return(<div className='page users'>\n    <h1>User: {name}, {address}, {phoneNumber}</h1>\n</div>)\n}","import React from \"react\";\r\nimport './Games.css'\r\n\r\nexport default function Games() {\r\n    return (<div className='page games'>\r\n        <h1>Games</h1>\r\n    </div>)\r\n}","import React from \"react\";\nimport './App.css'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n//pages\nimport Home from './view/pages/Home/Home';\nimport About from './view/pages/About/About';\nimport Users from './view/pages/Users/Users';\nimport Games from './view/pages/Games/Games';\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/about\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/users\">Users</Link>\n            </li>\n            <li>\n              <Link to=\"/games\">Games</Link>\n            </li>\n          </ul>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n\n          <Route path=\"/users/:userID\">\n            <Users />\n          </Route>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/games\">\n            <Games />\n          </Route>\n        </Switch>\n        <footer>This is our amazing app</footer>\n      </div>\n    </Router>\n  );\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}